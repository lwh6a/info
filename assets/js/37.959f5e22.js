(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{388:function(l,v,e){"use strict";e.r(v);var _=e(25),t=Object(_.a)({},(function(){var l=this,v=l.$createElement,e=l._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[e("h2",{attrs:{id:"bean的分类标识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bean的分类标识"}},[l._v("#")]),l._v(" bean的分类标识")]),l._v(" "),e("ul",[e("li",[l._v("@Service:\n"),e("ul",[e("li",[l._v("注解在类上，表示这是一个业务层bean")])])]),l._v(" "),e("li",[l._v("@Controller：\n"),e("ul",[e("li",[l._v("注解在类上，表示这是一个控制层bean")])])]),l._v(" "),e("li",[l._v("@Repository:\n"),e("ul",[e("li",[l._v("注解在类上，表示这是一个数据访问层bean")])])]),l._v(" "),e("li",[l._v("@Component：\n"),e("ul",[e("li",[l._v("注解在类上，表示通用bean")])])])]),l._v(" "),e("h2",{attrs:{id:"bean注入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bean注入"}},[l._v("#")]),l._v(" bean注入")]),l._v(" "),e("ul",[e("li",[l._v("@Autowired：\n"),e("ul",[e("li",[l._v("按类型装配")])])]),l._v(" "),e("li",[l._v("@Resource：\n"),e("ul",[e("li",[l._v("按名称装配")])])])]),l._v(" "),e("h2",{attrs:{id:"配置相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置相关"}},[l._v("#")]),l._v(" 配置相关")]),l._v(" "),e("ul",[e("li",[e("p",[l._v("@Configuration：")]),l._v(" "),e("ul",[e("li",[l._v("注解在类上，表示这是一个IOC容器，相当于spring的配置文件，java配置的方式。 IOC容器的配置类")])])]),l._v(" "),e("li",[e("p",[l._v("@Bean：")]),l._v(" "),e("ul",[e("li",[l._v("注解在方法上，声明当前方法返回一个Bean")])])]),l._v(" "),e("li",[e("p",[l._v("@PostConstruct：")]),l._v(" "),e("ul",[e("li",[l._v("注解在方法上，构造函数执行后执行。！！！！！！！！！！！！！！！！！！！！！！！！！！")])])]),l._v(" "),e("li",[e("p",[l._v("@PreDestroy：")]),l._v(" "),e("ul",[e("li",[l._v("注解在方法上，在Bean销毁前执行。！！！！！！！！！！！！！！！！！！！！！！！！！！")])])]),l._v(" "),e("li",[e("p",[l._v("@ComponentScan：")]),l._v(" "),e("ul",[e("li",[l._v("注解在类上，扫描标注了@Controller等注解的类，注册为bean")])])]),l._v(" "),e("li",[e("p",[l._v("@Lazy(true):")]),l._v(" "),e("ul",[e("li",[l._v("延迟初始化")])])]),l._v(" "),e("li",[e("p",[l._v("@Scope：")]),l._v(" "),e("ul",[e("li",[l._v("注解在类上，描述spring容器如何创建Bean实例。")])])]),l._v(" "),e("li",[e("p",[l._v("@Value：")]),l._v(" "),e("ul",[e("li",[l._v("注解在变量上，从配置文件中读取。")])])]),l._v(" "),e("li",[e("p",[l._v("@Profile：")]),l._v(" "),e("ul",[e("li",[l._v("注解在方法 类上 在不同情况下选择实例化不同的Bean 特定环境下生效！！！！！！！！！！！！！！！！！")])])]),l._v(" "),e("li",[e("p",[l._v("@SpringBootApplication：")]),l._v(" "),e("ul",[e("li",[l._v("@SpringBootApplication=@ComponentScan+@Configuration+@EnableAutoConfiguration：约定优于配置")])])]),l._v(" "),e("li",[e("p",[l._v("@WebServlet")]),l._v(" "),e("ul",[e("li",[l._v('(name="Servlet3FirstDemo",value="/Servlet3FirstDemo")定义servlet')])])]),l._v(" "),e("li",[e("p",[l._v("@WebFilter")]),l._v(" "),e("ul",[e("li",[l._v("将一个实现了javax.servlet.Filte接口的类定义为过滤器")])])])]),l._v(" "),e("h2",{attrs:{id:"控制层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#控制层"}},[l._v("#")]),l._v(" 控制层")]),l._v(" "),e("ul",[e("li",[l._v("@RestController\n"),e("ul",[e("li",[l._v("@RestController 是一个结合了 @ResponseBody 和 @Controller 的注解")])])]),l._v(" "),e("li",[l._v("@Controller\n"),e("ul",[e("li",[l._v("控制层注解")])])]),l._v(" "),e("li",[l._v("@RequestBody\n"),e("ul",[e("li",[l._v("请求数据")])])]),l._v(" "),e("li",[l._v("@ResponseBody\n"),e("ul",[e("li",[l._v("返回json")])])]),l._v(" "),e("li",[l._v("@PathVariable\n"),e("ul",[e("li",[l._v("restFul定位符")])])]),l._v(" "),e("li",[l._v("@RequestMapping　　　和请求报文是做对应的\n"),e("ul",[e("li",[l._v("value，指定请求的地址")]),l._v(" "),e("li",[l._v("method 请求方法类型 这个不写的话，自适应：get或者post")]),l._v(" "),e("li",[l._v("consumes 请求的提交内容类型")]),l._v(" "),e("li",[l._v("produces 指定返回的内容类型 仅当request请求头中的(Accept)类型中包含该指定类型才返回")]),l._v(" "),e("li",[l._v("params 指定request中必须包含某些参数值")]),l._v(" "),e("li",[l._v("headers 指定request中必须包含指定的header值")])])])]),l._v(" "),e("h2",{attrs:{id:"实体类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实体类"}},[l._v("#")]),l._v(" 实体类")]),l._v(" "),e("ul",[e("li",[l._v('@DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")\n'),e("ul",[e("li",[l._v("实体类保存格式转换")])])])])])}),[],!1,null,null,null);v.default=t.exports}}]);