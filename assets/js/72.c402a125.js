(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{420:function(i,l,v){"use strict";v.r(l);var _=v(25),t=Object(_.a)({},(function(){var i=this,l=i.$createElement,v=i._self._c||l;return v("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[v("h2",{attrs:{id:"新建代码库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#新建代码库"}},[i._v("#")]),i._v(" 新建代码库")]),i._v(" "),v("ul",[v("li",[i._v("在当前目录新建一个Git代码库\n"),v("ul",[v("li",[i._v("git init")])])]),i._v(" "),v("li",[i._v("新建一个目录，将其初始化为Git代码库\n"),v("ul",[v("li",[i._v("git init [project-name]")])])]),i._v(" "),v("li",[i._v("下载一个项目和它的整个代码历史\n"),v("ul",[v("li",[i._v("git clone [url]")])])])]),i._v(" "),v("h2",{attrs:{id:"配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[i._v("#")]),i._v(" 配置")]),i._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[i._v("Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），\n也可以在项目目录下（项目配置）。\n")])])]),v("ul",[v("li",[i._v("显示当前的Git配置\n"),v("ul",[v("li",[i._v("git config --list")])])]),i._v(" "),v("li",[i._v("编辑Git配置文件\n"),v("ul",[v("li",[i._v("git config -e [--global]")])])]),i._v(" "),v("li",[i._v("设置提交代码时的用户信息\n"),v("ul",[v("li",[i._v('git config [--global] user.name "[name]"')]),i._v(" "),v("li",[i._v('git config [--global] user.email "[email address]"')])])])]),i._v(" "),v("h2",{attrs:{id:"增加-删除-修改文件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#增加-删除-修改文件"}},[i._v("#")]),i._v(" 增加/删除/修改文件")]),i._v(" "),v("ul",[v("li",[i._v("查看状态\n"),v("ul",[v("li",[i._v("git status")])])]),i._v(" "),v("li",[i._v("查看变更内容\n"),v("ul",[v("li",[i._v("git diff")])])]),i._v(" "),v("li",[i._v("添加指定文件到暂存区\n"),v("ul",[v("li",[i._v("git add [file1] [file2] ...")])])]),i._v(" "),v("li",[i._v("添加指定目录到暂存区，包括子目录\n"),v("ul",[v("li",[i._v("git add [dir]")])])]),i._v(" "),v("li",[i._v("添加当前目录的所有文件到暂存区\n"),v("ul",[v("li",[i._v("git add .")]),i._v(" "),v("li",[i._v("添加每个变化前，都会要求确认")]),i._v(" "),v("li",[i._v("对于同一个文件的多处变化，可以实现分次提交")]),i._v(" "),v("li",[i._v("git add -p")])])]),i._v(" "),v("li",[i._v("删除工作区文件，并且将这次删除放入暂存区\n"),v("ul",[v("li",[i._v("git rm [file1] [file2] ...")])])]),i._v(" "),v("li",[i._v("停止追踪指定文件，但该文件会保留在工作区\n"),v("ul",[v("li",[i._v("git rm --cached [file]")])])]),i._v(" "),v("li",[i._v("改名文件，并且将这个改名放入暂存区\n"),v("ul",[v("li",[i._v("git mv [file-original] [file-renamed]")])])])]),i._v(" "),v("h2",{attrs:{id:"代码提交"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代码提交"}},[i._v("#")]),i._v(" 代码提交")]),i._v(" "),v("ul",[v("li",[i._v("提交暂存区到仓库区\n"),v("ul",[v("li",[i._v("git commit -m [message]")])])]),i._v(" "),v("li",[i._v("提交暂存区的指定文件到仓库区\n"),v("ul",[v("li",[i._v("git commit [file1] [file2] ... -m [message]")])])]),i._v(" "),v("li",[i._v("提交工作区自上次commit之后的变化，直接到仓库区\n"),v("ul",[v("li",[i._v("git commit -a")])])]),i._v(" "),v("li",[i._v("提交时显示所有diff信息\n"),v("ul",[v("li",[i._v("git commit -v")]),i._v(" "),v("li",[i._v("使用一次新的commit，替代上一次提交")])])]),i._v(" "),v("li",[i._v("如果代码没有任何新变化，则用来改写上一次commit的提交信息\n"),v("ul",[v("li",[i._v("git commit --amend -m [message]")])])]),i._v(" "),v("li",[i._v("重做上一次commit，并包括指定文件的新变化\n"),v("ul",[v("li",[i._v("git commit --amend [file1] [file2] ...")])])])]),i._v(" "),v("h2",{attrs:{id:"分支"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[i._v("#")]),i._v(" 分支")]),i._v(" "),v("ul",[v("li",[i._v("显示所有本地分支\n"),v("ul",[v("li",[i._v("git branch")])])]),i._v(" "),v("li",[i._v("列出所有远程分支")]),i._v(" "),v("li",[i._v("git branch -r")]),i._v(" "),v("li",[i._v("列出所有本地分支和远程分支")]),i._v(" "),v("li",[i._v("git branch -a")]),i._v(" "),v("li",[i._v("新建一个分支，但依然停留在当前分支")]),i._v(" "),v("li",[i._v("git branch [branch-name]")]),i._v(" "),v("li",[i._v("新建一个分支，与指定的远程分支建立追踪关系")]),i._v(" "),v("li",[i._v("git branch --track [branch] [remote-branch]")]),i._v(" "),v("li",[i._v("删除分支")]),i._v(" "),v("li",[i._v("git branch -d [branch-name]")]),i._v(" "),v("li",[i._v("删除远程分支")]),i._v(" "),v("li",[i._v("git push origin --delete [branch-name]")]),i._v(" "),v("li",[i._v("git branch -dr [remote/branch]")]),i._v(" "),v("li",[i._v("新建一个分支，并切换到该分支")]),i._v(" "),v("li",[i._v("git checkout -b [branch]")]),i._v(" "),v("li",[i._v("切换到指定分支，并更新工作区")]),i._v(" "),v("li",[i._v("git checkout [branch-name]")]),i._v(" "),v("li",[i._v("切换到上一个分支")]),i._v(" "),v("li",[i._v("git checkout -")]),i._v(" "),v("li",[i._v("建立追踪关系，在现有分支与指定的远程分支之间")]),i._v(" "),v("li",[i._v("git branch --set-upstream [branch] [remote-branch]")]),i._v(" "),v("li",[i._v("合并指定分支到当前分支")]),i._v(" "),v("li",[i._v("git merge [branch]")]),i._v(" "),v("li",[i._v("衍合指定分支到当前分支\n"),v("ul",[v("li",[i._v("git rebase "),v("branch")],1)])]),i._v(" "),v("li",[i._v("选择一个commit，合并进当前分支")]),i._v(" "),v("li",[i._v("git cherry-pick [commit]")])]),i._v(" "),v("h2",{attrs:{id:"标签"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[i._v("#")]),i._v(" 标签")]),i._v(" "),v("ul",[v("li",[i._v("列出所有本地标签\n"),v("ul",[v("li",[i._v("git tag")])])]),i._v(" "),v("li",[i._v("基于最新提交创建标签\n"),v("ul",[v("li",[i._v("git tag "),v("tagname")],1)])]),i._v(" "),v("li",[i._v("删除标签\n"),v("ul",[v("li",[i._v("git tag -d "),v("tagname")],1)])]),i._v(" "),v("li",[i._v("删除远程tag\n"),v("ul",[v("li",[i._v("git push origin :refs/tags/[tagName]")])])]),i._v(" "),v("li",[i._v("查看tag信息\n"),v("ul",[v("li",[i._v("git show [tag]")])])]),i._v(" "),v("li",[i._v("提交指定tag\n"),v("ul",[v("li",[i._v("git push [remote] [tag]")])])]),i._v(" "),v("li",[i._v("提交所有tag\n"),v("ul",[v("li",[i._v("git push [remote] --tags")])])]),i._v(" "),v("li",[i._v("新建一个分支，指向某个tag\n"),v("ul",[v("li",[i._v("git checkout -b [branch] [tag]")])])])]),i._v(" "),v("h2",{attrs:{id:"查看信息"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#查看信息"}},[i._v("#")]),i._v(" 查看信息")]),i._v(" "),v("ul",[v("li",[i._v("显示有变更的文件\n"),v("ul",[v("li",[i._v("git status")])])]),i._v(" "),v("li",[i._v("显示当前分支的版本历史\n"),v("ul",[v("li",[i._v("git log")])])]),i._v(" "),v("li",[i._v("显示commit历史，以及每次commit发生变更的文件\n"),v("ul",[v("li",[i._v("git log --stat")])])]),i._v(" "),v("li",[i._v("搜索提交历史，根据关键词\n"),v("ul",[v("li",[i._v("git log -S [keyword]")])])]),i._v(" "),v("li",[i._v("显示某个commit之后的所有变动，每个commit占据一行\n"),v("ul",[v("li",[i._v("git log [tag] HEAD --pretty=format:%s")])])]),i._v(" "),v("li",[i._v('显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n'),v("ul",[v("li",[i._v("git log [tag] HEAD --grep feature")])])]),i._v(" "),v("li",[i._v("显示某个文件的版本历史，包括文件改名\n"),v("ul",[v("li",[i._v("git log --follow [file]")]),i._v(" "),v("li",[i._v("git whatchanged [file]")])])]),i._v(" "),v("li",[i._v("显示指定文件相关的每一次diff\n"),v("ul",[v("li",[i._v("git log -p [file]")])])]),i._v(" "),v("li",[i._v("显示过去5次提交\n"),v("ul",[v("li",[i._v("git log -5 --pretty --oneline")])])]),i._v(" "),v("li",[i._v("显示所有提交过的用户，按提交次数排序\n"),v("ul",[v("li",[i._v("git shortlog -sn")])])]),i._v(" "),v("li",[i._v("显示指定文件是什么人在什么时间修改过\n"),v("ul",[v("li",[i._v("git blame [file]")])])]),i._v(" "),v("li",[i._v("显示暂存区和工作区的差异\n"),v("ul",[v("li",[i._v("git diff")])])]),i._v(" "),v("li",[i._v("显示暂存区和上一个commit的差异\n"),v("ul",[v("li",[i._v("git diff --cached [file]")])])]),i._v(" "),v("li",[i._v("显示工作区与当前分支最新commit之间的差异\n"),v("ul",[v("li",[i._v("git diff HEAD")])])]),i._v(" "),v("li",[i._v("显示两次提交之间的差异\n"),v("ul",[v("li",[i._v("git diff [first-branch]...[second-branch]")])])]),i._v(" "),v("li",[i._v("显示今天你写了多少行代码\n"),v("ul",[v("li",[i._v('git diff --shortstat "@{0 day ago}"')])])]),i._v(" "),v("li",[i._v("显示某次提交的元数据和内容变化\n"),v("ul",[v("li",[i._v("git show [commit]")])])]),i._v(" "),v("li",[i._v("显示某次提交发生变化的文件\n"),v("ul",[v("li",[i._v("git show --name-only [commit]")])])]),i._v(" "),v("li",[i._v("显示某次提交时，某个文件的内容\n"),v("ul",[v("li",[i._v("git show [commit]:[filename]")])])]),i._v(" "),v("li",[i._v("显示当前分支的最近几次提交\n"),v("ul",[v("li",[i._v("git reflog")])])])]),i._v(" "),v("h2",{attrs:{id:"远程操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#远程操作"}},[i._v("#")]),i._v(" 远程操作")]),i._v(" "),v("ul",[v("li",[i._v("下载远程仓库的所有变动\n"),v("ul",[v("li",[i._v("git fetch [remote]")])])]),i._v(" "),v("li",[i._v("取回远程仓库的变化，并与本地分支合并\n"),v("ul",[v("li",[i._v("git pull [remote] [branch]")])])]),i._v(" "),v("li",[i._v("显示所有远程仓库\n"),v("ul",[v("li",[i._v("git remote -v")])])]),i._v(" "),v("li",[i._v("显示某个远程仓库的信息\n"),v("ul",[v("li",[i._v("git remote show [remote]")])])]),i._v(" "),v("li",[i._v("增加一个新的远程仓库，并命名\n"),v("ul",[v("li",[i._v("git remote add [shortname] [url]")])])]),i._v(" "),v("li",[i._v("上传本地指定分支到远程仓库\n"),v("ul",[v("li",[i._v("git push [remote] [branch]")])])]),i._v(" "),v("li",[i._v("强行推送当前分支到远程仓库，即使有冲突\n"),v("ul",[v("li",[i._v("git push [remote] --force")])])]),i._v(" "),v("li",[i._v("推送所有分支到远程仓库\n"),v("ul",[v("li",[i._v("git push [remote] --all")])])]),i._v(" "),v("li",[i._v("删除远程分支或标签\n"),v("ul",[v("li",[i._v("git push "),v("remote",[i._v(" :<branch/tag-name>")])],1)])]),i._v(" "),v("li",[i._v("上传所有标签\n"),v("ul",[v("li",[i._v("git push --tags")])])])]),i._v(" "),v("h2",{attrs:{id:"撤销"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[i._v("#")]),i._v(" 撤销")]),i._v(" "),v("ul",[v("li",[i._v("撤销工作目录中所有未提交文件的修改内容\n"),v("ul",[v("li",[i._v("git reset --hard HEAD")])])]),i._v(" "),v("li",[i._v("撤销指定的未提交文件的修改内容\n"),v("ul",[v("li",[i._v("git checkout HEAD "),v("file")],1)])]),i._v(" "),v("li",[i._v("撤销指定的提交\n"),v("ul",[v("li",[i._v("git revert "),v("commit")],1)])]),i._v(" "),v("li",[i._v("退回到之前1天的版本\n"),v("ul",[v("li",[i._v('git log --before="1 days"')])])]),i._v(" "),v("li",[i._v("恢复暂存区的指定文件到工作区\n"),v("ul",[v("li",[i._v("git checkout [file]")])])]),i._v(" "),v("li",[i._v("恢复某个commit的指定文件到暂存区和工作区\n"),v("ul",[v("li",[i._v("git checkout [commit] [file]")])])]),i._v(" "),v("li",[i._v("恢复暂存区的所有文件到工作区\n"),v("ul",[v("li",[i._v("git checkout .")])])]),i._v(" "),v("li",[i._v("重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n"),v("ul",[v("li",[i._v("git reset [file]")])])]),i._v(" "),v("li",[i._v("重置暂存区与工作区，与上一次commit保持一致\n"),v("ul",[v("li",[i._v("git reset --hard")])])]),i._v(" "),v("li",[i._v("重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n"),v("ul",[v("li",[i._v("git reset [commit]")])])]),i._v(" "),v("li",[i._v("重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n"),v("ul",[v("li",[i._v("git reset --hard [commit]")])])]),i._v(" "),v("li",[i._v("重置当前HEAD为指定commit，但保持暂存区和工作区不变\n"),v("ul",[v("li",[i._v("git reset --keep [commit]")])])]),i._v(" "),v("li",[i._v("新建一个commit，用来撤销指定commit\n"),v("ul",[v("li",[i._v("后者的所有变化都将被前者抵消，并且应用到当前分支")]),i._v(" "),v("li",[i._v("git revert [commit]")])])]),i._v(" "),v("li",[i._v("暂时将未提交的变化移除，稍后再移入\n"),v("ul",[v("li",[i._v("git stash")]),i._v(" "),v("li",[i._v("git stash pop")])])])]),i._v(" "),v("h2",{attrs:{id:"其他"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[i._v("#")]),i._v(" 其他")]),i._v(" "),v("ul",[v("li",[i._v("生成一个可供发布的压缩包\n"),v("ul",[v("li",[i._v("git archive")])])])])])}),[],!1,null,null,null);l.default=t.exports}}]);