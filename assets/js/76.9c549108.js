(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{424:function(t,e,a){"use strict";a.r(e);var s=a(25),_=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"nginx-反向代理实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-反向代理实现"}},[t._v("#")]),t._v(" Nginx 反向代理实现")]),t._v(" "),a("ol",[a("li",[t._v("反向代理基本配置")]),t._v(" "),a("li",[t._v("负载均衡配置与参数解析")]),t._v(" "),a("li",[t._v("负载均衡算法详解")]),t._v(" "),a("li",[t._v("反向代理基本配置")])]),t._v(" "),a("p",[t._v("提问：什么是反向代理其与正向代理有什么区别？\n"),a("strong",[t._v("正向代理的概念：")]),t._v("\n正向代理是指客户端与目标服务器之间增加一个代理服务器，客户端直接访问代理服务器，在由代理服务器访问目标服务器并返回客户端并返回 。这个过程当中客户端需要知道代理服务器地址，并配置连接。\n"),a("img",{attrs:{src:"https://images-cdn.shimo.im/Toh3jB1uHeodiycl/image.png!thumbnail",alt:"图片"}})]),t._v(" "),a("p",[a("strong",[t._v("反向代理的概念：")]),t._v("\n反向代理是指 客户端访问目标服务器，在目标服务内部有一个统一接入网关将请求转发至后端真正处理的服务器并返回结果。这个过程当中客户端不需要知道代理服务器地址，代理对客户端而言是透明的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images-cdn.shimo.im/i8oQuJikm9EREsxz/image.png!thumbnail",alt:"图片"}})]),t._v(" "),a("p",[a("strong",[t._v("反向代理与正向代理的区别")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("正向代理")])]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("反向代理")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("代理服务器位置")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("客户端与服务都能连接的们位置")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("目标服务器内部")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("主要作用")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("屏蔽客户端IP、集中式缓存、解决客户端不能直连服务端的问题。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("屏蔽服务端内部实现、负载均衡、缓存。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("应用场景")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("爬虫、翻墙、maven 的nexus 服务")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Nginx 、Apache负载均衡应用")])])])]),t._v(" "),a("h2",{attrs:{id:"_1-nginx代理基本配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-nginx代理基本配置"}},[t._v("#")]),t._v(" 1.Nginx代理基本配置")]),t._v(" "),a("p",[t._v("Nginx 代理只需要配置 location 中配置proxy_pass 属性即可。其指向代理的服务器地址。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 正向代理到baidu 服务\nlocation = /baidu.html {\n         proxy_pass http://www.baidu.com;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 反向代理至 本机的8010服务\nlocation /luban/ {\n     proxy_pass http://127.0.0.1:8010;  \n}\n")])])]),a("p",[a("strong",[t._v("代理相关参数：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 代理服务\nproxy_pass\n# 是否允许重定向\nproxy_redirect off; \n# 传 header 参数至后端服务\nproxy_set_header Host $host; \n# 设置request header 即客户端IP 地址\nproxy_set_header X-Forwarded-For $remote_addr; \n# 连接代理服务超时时间\nproxy_connect_timeout 90; \n# 请求发送最大时间\nproxy_send_timeout 90; \n# 读取最大时间\nproxy_read_timeout 90;  \nproxy_buffer_size 4k; \nproxy_buffers 4 32k;\nproxy_busy_buffers_size 64k; \nproxy_temp_file_write_size 64k;\n")])])]),a("h2",{attrs:{id:"_2-负载均衡配置与参数解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-负载均衡配置与参数解析"}},[t._v("#")]),t._v(" 2.负载均衡配置与参数解析")]),t._v(" "),a("p",[t._v("通过proxy_pass 可以把请求代理至后端服务，但是为了实现更高的负载及性能， 我们的后端服务通常是多个， 这个是时候可以通过upstream 模块实现负载均衡。")]),t._v(" "),a("p",[a("strong",[t._v("演示upstream 的实现。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("upstream backend {     \n   server 127.0.0.1:8010 weight=1;\n   server 127.0.0.1:8080 weight=2;\n\n  server 127.0.0.1:8030 weight=1 backup;\n}\nlocation / {\n    proxy_pass http://backend;\n}\n")])])]),a("p",[a("strong",[t._v("upstream 相关参数:")])]),t._v(" "),a("ul",[a("li",[t._v("server\t反向服务地址 加端口")]),t._v(" "),a("li",[t._v("**weight\t **权重")]),t._v(" "),a("li",[t._v("**max_fails\t**失败多少次 认为主机已挂掉则，踢出")]),t._v(" "),a("li",[t._v("**fail_timeout\t**踢出后重新探测时间")]),t._v(" "),a("li",[t._v("**backup\t**备用服务")]),t._v(" "),a("li",[t._v("**max_conns\t**允许最大连接数")]),t._v(" "),a("li",[t._v("**slow_start\t**当节点恢复，不立即加入,而是等待 slow_start\t后加入服务对列。")])]),t._v(" "),a("h2",{attrs:{id:"_3-upstream-负载均衡算法介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-upstream-负载均衡算法介绍"}},[t._v("#")]),t._v(" 3.upstream 负载均衡算法介绍")]),t._v(" "),a("ul",[a("li",[t._v("**ll+weight： **轮询加权重 (默认)")]),t._v(" "),a("li",[t._v("**ip_hash : **基于Hash 计算 ,用于保持session 一至性")]),t._v(" "),a("li",[a("strong",[t._v("url_hash:")]),t._v(" 静态资源缓存,节约存储，加快速度（第三方）")]),t._v(" "),a("li",[t._v("**least_conn **：最少链接（第三方）")]),t._v(" "),a("li",[t._v("**least_time  **：最小的响应时间,计算节点平均响应时间，然后取响应最快的那个，分配更高权重（第三方）")])])])}),[],!1,null,null,null);e.default=_.exports}}]);