(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{387:function(e,r,t){"use strict";t.r(r);var a=t(25),n=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"spring-boot启动流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot启动流程"}},[e._v("#")]),e._v(" Spring-Boot启动流程")]),e._v(" "),t("h4",{attrs:{id:"servletcontextinitializer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servletcontextinitializer"}},[e._v("#")]),e._v(" ServletContextInitializer")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.boot.web.servlet.ServletContextInitializer")]),e._v(" "),t("p",[e._v("用于以编程方式配置Servlet 3.0+{@link ServletContext Context}的接口。与 WebApplicationInitializer 不同的是实现此接口(且不实现 WebApplicationInitializer)的类不会被 SpringServletContainerInitializer 检测到，因此Servlet容器不会自动引导")]),e._v(" "),t("p",[e._v("此接口的设计方式类似于ServletContainerInitializer，但其生命周期由Spring管理，而不是Servlet容器")]),e._v(" "),t("p",[e._v("在springboot启动web容器后调用")])]),e._v(" "),t("h4",{attrs:{id:"banner"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#banner"}},[e._v("#")]),e._v(" Banner")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.boot.Banner")]),e._v(" "),t("p",[e._v("用于以编程方式编写横幅的接口类")]),e._v(" "),t("p",[e._v("在springboot启动时打印横幅")]),e._v(" "),t("p",[e._v("需要在SpringApplication中设置")])]),e._v(" "),t("h4",{attrs:{id:"applicationrunner"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#applicationrunner"}},[e._v("#")]),e._v(" ApplicationRunner")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.boot.ApplicationRunner")]),e._v(" "),t("p",[e._v("在springboot启动完成后调用")]),e._v(" "),t("p",[e._v("支持@Order注解")])]),e._v(" "),t("h4",{attrs:{id:"commandlinerunner"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commandlinerunner"}},[e._v("#")]),e._v(" CommandLineRunner")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.boot.CommandLineRunner")]),e._v(" "),t("p",[e._v("同ApplicationRunner接口，区别为入参不同")]),e._v(" "),t("p",[e._v("在ApplicationRunner后调用")])]),e._v(" "),t("h4",{attrs:{id:"springapplicationrunlistener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springapplicationrunlistener"}},[e._v("#")]),e._v(" SpringApplicationRunListener")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.boot.SpringApplicationRunListener")]),e._v(" "),t("p",[e._v("在springboot启动的各个阶段进行回调")]),e._v(" "),t("p",[e._v("需要在spring.factories中定义")]),e._v(" "),t("p",[e._v("需要有入参为(SpringApplication application,String ... args)的构造函数")])]),e._v(" "),t("h4",{attrs:{id:"resttemplatecustomizer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#resttemplatecustomizer"}},[e._v("#")]),e._v(" RestTemplateCustomizer")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.boot.web.client.RestTemplateCustomizer")]),e._v(" "),t("p",[e._v("配置RestTemplate")])]),e._v(" "),t("h3",{attrs:{id:"spring启动流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring启动流程"}},[e._v("#")]),e._v(" Spring启动流程")]),e._v(" "),t("h4",{attrs:{id:"applicationcontextaware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#applicationcontextaware"}},[e._v("#")]),e._v(" ApplicationContextAware")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.context.ApplicationContextAware，继承Aware")]),e._v(" "),t("p",[e._v("为bean注入ApplicationContext")]),e._v(" "),t("p",[e._v("在org.springframework.context.support.ApplicationContextAwareProcessor 中调用")])]),e._v(" "),t("h4",{attrs:{id:"environmentaware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#environmentaware"}},[e._v("#")]),e._v(" EnvironmentAware")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.context.EnvironmentAware")]),e._v(" "),t("p",[e._v("为bean注入Environment")]),e._v(" "),t("p",[e._v("在org.springframework.context.support.ApplicationContextAwareProcessor 中调用")])]),e._v(" "),t("h4",{attrs:{id:"embeddedvalueresolveraware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#embeddedvalueresolveraware"}},[e._v("#")]),e._v(" EmbeddedValueResolverAware")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.context.EmbeddedValueResolverAware")]),e._v(" "),t("p",[e._v("注入org.springframework.util.StringValueResolver，实现字符串解析")]),e._v(" "),t("p",[e._v("在org.springframework.context.support.ApplicationContextAwareProcessor 中调用")])]),e._v(" "),t("h4",{attrs:{id:"applicationeventpublisheraware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#applicationeventpublisheraware"}},[e._v("#")]),e._v(" ApplicationEventPublisherAware")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.context.ApplicationEventPublisherAware")]),e._v(" "),t("p",[e._v("注入org.springframework.context.ApplicationEventPublisher 实现事件推送")])]),e._v(" "),t("h4",{attrs:{id:"applicationlistener"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#applicationlistener"}},[e._v("#")]),e._v(" ApplicationListener")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.context.ApplicationListener")]),e._v(" "),t("p",[e._v("监听org.springframework.context.ApplicationEvent 事件")]),e._v(" "),t("p",[e._v("spring-boot启动会在特定的时机发布事件")]),e._v(" "),t("p",[e._v("org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent")]),e._v(" "),t("p",[e._v("org.springframework.context.event.ContextRefreshedEvent")]),e._v(" "),t("p",[e._v("org.springframework.boot.context.event.ApplicationStartedEvent")]),e._v(" "),t("p",[e._v("org.springframework.boot.availability.AvailabilityChangeEvent")]),e._v(" "),t("p",[e._v("org.springframework.boot.context.event.ApplicationReadyEvent")]),e._v(" "),t("p",[e._v("org.springframework.boot.availability.AvailabilityChangeEvent")])]),e._v(" "),t("h4",{attrs:{id:"beanfactoryaware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanfactoryaware"}},[e._v("#")]),e._v(" BeanFactoryAware")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.beans.factory.BeanFactoryAware")]),e._v(" "),t("p",[e._v("注入 org.springframework.beans.factory.BeanFactory")]),e._v(" "),t("p",[e._v("在bean初始化时调用")])]),e._v(" "),t("h4",{attrs:{id:"beannameaware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beannameaware"}},[e._v("#")]),e._v(" BeanNameAware")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.beans.factory.BeanNameAware")]),e._v(" "),t("p",[e._v("设置bean名称")]),e._v(" "),t("p",[e._v("在bean初始化时调用")])]),e._v(" "),t("h4",{attrs:{id:"disposablebean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#disposablebean"}},[e._v("#")]),e._v(" DisposableBean")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.beans.factory.DisposableBean")]),e._v(" "),t("p",[e._v("bean销毁是调用")])]),e._v(" "),t("h4",{attrs:{id:"initializingbean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#initializingbean"}},[e._v("#")]),e._v(" InitializingBean")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.beans.factory.InitializingBean")]),e._v(" "),t("p",[e._v("bean初始化后设置参数使用")]),e._v(" "),t("p",[e._v("在初始化完成后掉用")])]),e._v(" "),t("h4",{attrs:{id:"smartinitializingsingleton"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#smartinitializingsingleton"}},[e._v("#")]),e._v(" SmartInitializingSingleton")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.beans.factory.SmartInitializingSingleton")]),e._v(" "),t("p",[e._v("当所有单例 bean 都初始化完成以后， 容器会回调该接口的方法 "),t("code",[e._v("afterSingletonsInstantiated")]),e._v("。")]),e._v(" "),t("p",[e._v("保证在所有非懒加载的单例bean都加载完成后调用")])]),e._v(" "),t("h4",{attrs:{id:"beanfactorypostprocessor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanfactorypostprocessor"}},[e._v("#")]),e._v(" BeanFactoryPostProcessor")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.beans.factory.config.BeanFactoryPostProcessor")]),e._v(" "),t("p",[e._v("注入org.springframework.beans.factory.config.ConfigurableListableBeanFactory")]),e._v(" "),t("p",[e._v("在读取完BeanDefinition后调用，可获取BeanDefinition进行修改")])]),e._v(" "),t("h4",{attrs:{id:"beanpostprocessor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beanpostprocessor"}},[e._v("#")]),e._v(" BeanPostProcessor")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.beans.factory.config.BeanPostProcessor")]),e._v(" "),t("p",[e._v("在bean实例化后调用，初始化前后调用")])]),e._v(" "),t("h4",{attrs:{id:"servletcontextaware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#servletcontextaware"}},[e._v("#")]),e._v(" ServletContextAware")]),e._v(" "),t("blockquote",[t("p",[e._v("org.springframework.web.context.ServletContextAware")]),e._v(" "),t("p",[e._v("注入javax.servlet.ServletContext")])])])}),[],!1,null,null,null);r.default=n.exports}}]);