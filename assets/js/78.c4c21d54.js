(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{426:function(t,e,n){"use strict";n.r(e);var a=n(25),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"nginx-配置与使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx-配置与使用"}},[t._v("#")]),t._v(" Nginx 配置与使用")]),t._v(" "),n("ol",[n("li",[t._v("配置文件语法格式")]),t._v(" "),n("li",[t._v("配置第一个静态WEB服务")]),t._v(" "),n("li",[t._v("配置案例")]),t._v(" "),n("li",[t._v("动静分离实现")]),t._v(" "),n("li",[t._v("防盗链")]),t._v(" "),n("li",[t._v("多域名站点")]),t._v(" "),n("li",[t._v("下载限速")]),t._v(" "),n("li",[t._v("IP 黑名单")]),t._v(" "),n("li",[t._v("基于user-agent分流")]),t._v(" "),n("li",[t._v("日志配置")])]),t._v(" "),n("h2",{attrs:{id:"_1、配置文件的语法格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、配置文件的语法格式"}},[t._v("#")]),t._v(" 1、配置文件的语法格式")]),t._v(" "),n("p",[t._v("先来看一个简单的nginx 配置")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("worker_processes  1;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n        listen       80;\n        server_name  localhost;\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        location /nginx_status {\n    \t   stub_status on;\n    \t   access_log   off;\n  \t    }\n    }\n}\n")])])]),n("p",[t._v("上述配置中的events、http、server、location、upstream等属于配置项块。而worker_processes 、worker_connections、include、listen  属于配置项块中的属性。   /nginx_status   属于配置块的特定参数参数。其中server块嵌套于http块，其可以直接继承访问Http块当中的参数。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[n("strong",[t._v("配置块")])]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("名称开头用大口号包裹其对应属性")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("strong",[t._v("属性")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("基于空格切分属性名与属性值，属性值可能有多个项 都以空格进行切分 如：  access_log  logs/host.access.log  main")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[n("strong",[t._v("参数")])]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("其配置在 块名称与大括号间，其值如果有多个也是通过空格进行拆")])])])]),t._v(" "),n("p",[t._v('注意 如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或双引号括住配置项值，否则Nginx会报语法错误。例如：\n    log_format  main  \'$remote_addr - $remote_user [$time_local] "$request" \'\n                     \'$status $body_bytes_sent "$http_referer" \'\n                     \'"$http_user_agent" "$http_x_forwarded_for"\';')]),t._v(" "),n("h2",{attrs:{id:"_2、配置第一个静态web服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、配置第一个静态web服务"}},[t._v("#")]),t._v(" 2、配置第一个静态WEB服务")]),t._v(" "),n("p",[n("strong",[t._v("基础站点演示：")])]),t._v(" "),n("ul",[n("li",[t._v("[ ] 创建站点目录 mkdir -p /usr/www/luban")]),t._v(" "),n("li",[t._v("[ ] 编写静态文件")]),t._v(" "),n("li",[t._v("[ ] 配置 nginx.conf\n"),n("ul",[n("li",[t._v("[ ] 配置server")]),t._v(" "),n("li",[t._v("[ ] 配置location")])])])]),t._v(" "),n("p",[t._v("基本配置介绍说明：\n（1）监听端口\n语法：listen address：\n默认：listen 80;\n配置块：server")]),t._v(" "),n("p",[t._v('（2）主机名称\n语法：server_name name[……];\n默认：server_name "";\n配置块：server\nserver_name后可以跟多个主机名称，如server_name '),n("a",{attrs:{href:"http://www.testweb.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("www.testweb.com"),n("OutboundLink")],1),t._v("、download.testweb.com;。 支持通配符与正则")]),t._v(" "),n("p",[n("strong",[t._v("（3）location")]),t._v("\n语法：location[=|～|～*|^～|@]/uri/{……}\n配置块：server")]),t._v(" "),n("ol",[n("li",[t._v("=表示把URI作为字符串，以便与参数中的uri做完全匹配。")]),t._v(" "),n("li",[t._v("/ 基于uri目录匹配")]),t._v(" "),n("li",[t._v("～表示正则匹配URI时是字母大小写敏感的。")]),t._v(" "),n("li",[t._v("～*表示正则匹配URI时忽略字母大小写问题。")]),t._v(" "),n("li",[t._v("^～表示正则匹配URI时只需要其前半部分与uri参数匹配即可。")])]),t._v(" "),n("p",[n("strong",[t._v("匹配优先规则：")])]),t._v(" "),n("ol",[n("li",[t._v("精确匹配优先 =")]),t._v(" "),n("li",[t._v("正则匹配优先 ^~")]),t._v(" "),n("li",[t._v("前缀最大匹配优先。")]),t._v(" "),n("li",[t._v("配置靠前优化")])]),t._v(" "),n("p",[t._v("（4）root 指定站点根目录\n可配置在 server与location中，基于ROOT路径+URL中路径去寻找指定文件。\n（5）alias 指定站点别名\n只能配置location 中。基于alias 路径+ URL移除location  前缀后的路径来寻找文件。\n如下示例：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location /V1 {\n      alias  /www/old_site;\n      index  index.html index.htm;\n}\n#防问规则如下\nURL：http://xxx:xx/V1/a.html\n最终寻址：/www/old_site/a.thml\n")])])]),n("p",[n("strong",[t._v("动静分离演示：")])]),t._v(" "),n("ul",[n("li",[t._v("[ ] 创建静态站点")]),t._v(" "),n("li",[t._v("[ ] 配置 location /static")]),t._v(" "),n("li",[t._v("[ ] 配置 ~* .(gif|png|css|js)$")])]),t._v(" "),n("p",[n("strong",[t._v("基于目录动静分离")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("   server {\n        listen 80;\n        server_name *.luban.com;\n        root /usr/www/luban;\n        location / {\n                index luban.html;\n        }\n        location /static {\n         alias /usr/www/static;\n        }\n }\n")])])]),n("p",[n("strong",[t._v("基于正则动静分离")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location ~* \\.(gif|jpg|png|css|js)$ {\n      root /usr/www/static;\n}\n")])])]),n("p",[n("strong",[t._v("防盗链配置演示：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("# 加入至指定location 即可实现\nvalid_referers none blocked *.luban.com;\n if ($invalid_referer) {\n       return 403;\n}\n")])])]),n("p",[n("strong",[t._v("下载限速：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location /download {\n    limit_rate 1m; //限制每S下载速度\n    limit_rate_after 30m; // 超过30 之 后在下载\n}\n\n")])])]),n("p",[n("strong",[t._v("创建IP黑名单")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("#封禁指定IP\ndeny 192.168.0.1;\nallow 192.168.0.1;\n#开放指定IP 段\nallow 192.168.0.0/24;\n#封禁所有\ndeny    all;\n#开放所有\nallow    all;\n# 创建黑名单文件\necho 'deny 192.168.0.132;' >> balck.ip\n#http 配置块中引入 黑名单文件\ninclude       black.ip;\n")])])]),n("h2",{attrs:{id:"_3、日志配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、日志配置"}},[t._v("#")]),t._v(" 3、日志配置")]),t._v(" "),n("p",[n("strong",[t._v("日志格式：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('log_format  main  \'$remote_addr - $remote_user [$time_local]   "$request" \'\n                     \'$status $body_bytes_sent "$http_referer" \'\n                  \'"$http_user_agent" "$http_x_forwarded_for"\';\naccess_log  logs/access.log  main;\n#基于域名打印日志\naccess_log logs/$host.access.log main;\n')])])]),n("p",[n("strong",[t._v("error日志的设置")]),t._v("\n语法：error_log /path/file level;\n默认：error_log logs/error.log error;\nlevel是日志的输出级别，取值范围是debug、info、notice、warn、error、crit、alert、emerg，\n"),n("strong",[t._v("针对指定的客户端输出debug级别的日志")]),t._v("\n语法：debug_connection[IP|CIDR]\nevents {\ndebug_connection 192.168.0.147; \ndebug_connection 10.224.57.0/200;\n}\n注意：debug 日志开启 必须在安装时 添加  --with-debug (允许debug)\n[nginx.conf](")])])}),[],!1,null,null,null);e.default=s.exports}}]);